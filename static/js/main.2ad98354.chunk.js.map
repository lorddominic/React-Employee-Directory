{"version":3,"sources":["utils/API.js","components/searchbar.js","components/title/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Searchbar","props","onChange","handleInputChange","value","search","name","type","className","placeholder","id","Title","sortTypes","up","class","fn","a","b","localeCompare","down","default","App","state","currentSort","results","onSortChange","nextSort","setState","event","target","API","then","res","data","map","result","first","last","searchName","registered","date","photo","picture","thumbnail","email","phone","location","city","gender","newData","catch","error","console","log","this","length","onClick","sort","filter","p","toLowerCase","includes","src","alt","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2ad98354.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default {\r\n    getUsers: function(){\r\n        return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n    }\r\n}","import React from \"react\";\r\n\r\nfunction Searchbar(props){\r\n    return(\r\n        <div>\r\n            <input\r\n                onChange = {props.handleInputChange}\r\n                value = {props.search}\r\n                name = \"search\"\r\n                type = \"text\"\r\n                className = \"form-control\"\r\n                placeholder = \"Search\"\r\n                id=\"Search\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default Searchbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title() {\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <div className=\"nav-wrapper\">\r\n                    <div className=\"title center flow-text\">\r\n                        react employee list\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Title;","import React from 'react';\nimport API from \"./utils/API\";\nimport Searchbar from \"./components/searchbar\";\nimport Title from \"./components/title/index\";\n// import \"materialize-css/dist/css/materialize.min.css\";\nimport \"./App.css\";\n\nconst sortTypes = {\n  up: {\n    class: \"sortup\",\n    fn: (a, b) => a.name.localeCompare(b.name)\n  },\n  down: {\n    class: \"sortdown\",\n    fn: (a, b) => b.name.localeCompare(a.name)\n  },\n  default: {\n    class: \"sort\",\n    fn: (a, b) => a\n  }\n};\n\nclass App extends React.Component {\n  state = {\n    currentSort: \"default\",\n    search: \"\",\n    results: []\n  };\n\n  componentDidMount() {\n    API.getUsers()\n      .then(res =>\n        res.data.results.map(result => ({\n          name: `${result.name.first} ${result.name.last}`,\n          searchName: `${result.name.first}${result.name.last}`,\n          id: result.registered.date,\n          photo: result.picture.thumbnail,\n          email: result.email,\n          phone: result.phone,\n          location: result.location.city,\n          gender: result.gender\n        }))\n      )\n      .then(newData => this.setState({ results: newData }))\n      .catch(error => console.log(error));\n  }\n  onSortChange = () => {\n    const { currentSort } = this.state;\n    let nextSort;\n\n    if (currentSort === \"down\") nextSort = \"default\";\n    else if (currentSort === \"up\") nextSort = \"down\";\n    else if (currentSort === \"default\") nextSort = \"up\";\n\n    this.setState({\n      currentSort: nextSort\n    });\n  };\n\n  handleInputChange = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  render() {\n    const data = this.state.results;\n    const { currentSort } = this.state;\n\n    return (\n      data.length > 0 && (\n        <div>\n          <Title>reactreeeeeeeeeeeeeg</Title>\n          <div className=\"container\">\n            <div className=\"row search-bar-row\">\n              <div className=\"col s4\"></div>\n              <div className=\"col s4\">\n                <Searchbar\n                  value={this.state.search}\n                  handleInputChange={this.handleInputChange}\n                />\n              </div>\n              <div className=\"col s4\"></div>\n            </div>\n            <div className=\"row final-table-row\">\n              <div className=\"col s12\">\n                <table className=\"text-left\">\n                  <thead>\n                    <tr>\n                      <th>\n                        Name\n                          <button\n                          className=\"btn-flat\"\n                          id=\"arrow-btn\"\n                          onClick={this.onSortChange}\n                        ></button>\n                      </th>\n                      <th>Gender</th>\n                      <th>Email</th>\n                      <th>Phone</th>\n                      <th>Location</th>\n                      <th>Photo</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {[...data]\n                      .sort(sortTypes[currentSort].fn)\n                      .filter(p =>\n                        p.searchName\n                          .toLowerCase()\n                          .includes(this.state.search)\n                      )\n                      .map(p => (\n\n                        <tr>\n                          <td>{p.name}</td>\n                          <td>{p.gender}</td>\n                          <td>{p.email}</td>\n                          <td>{p.phone}</td>\n                          <td>{p.location}</td>\n                          <td>\n                            <img\n                              src={p.photo}\n                              alt=\"employee\"\n                            />\n                          </td>\n                        </tr>\n                      ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}