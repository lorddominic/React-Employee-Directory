{"version":3,"sources":["pages/EmployeeDetails.js","pages/Employee.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeDetails","props","key","firstName","lastName","gender","location","email","cell","src","picture","medium","Employee","state","allRecords","displayRecords","searchTerm","currentSort","componentDidMount","axios","get","then","records","console","log","setState","data","results","alphabetize","nextSort","getLadies","dontMessWithState","Array","ladies","filter","element","handler","event","target","value","filtered","name","first","last","toLowerCase","includes","onClick","this","id","type","onChange","map","index","city","React","Component","App","className","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gSAoBeA,MAjBf,SAAyBC,GACrB,OACI,wBAAIC,IAAKD,EAAMC,KACX,4BAAKD,EAAME,WACX,4BAAKF,EAAMG,UACX,4BAAKH,EAAMI,QACX,4BAAKJ,EAAMK,UACX,4BAAKL,EAAMM,OACX,4BAAKN,EAAMO,MACX,4BAAI,yBAAKC,IAAKR,EAAMS,QAAQC,YCyGzBC,E,4MA/FXC,MAAQ,CACJC,WAAY,GACZC,eAAgB,GAChBC,WAAY,GACZC,YAAa,W,EAEjBC,kBAAoB,WAChBC,IAAMC,IAAI,iDACLC,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAEX,WAAYQ,EAAQI,KAAKC,QAASZ,eAAgBO,EAAQI,KAAKC,UAAW,kBAAMJ,QAAQC,IAAI,EAAKX,c,EAK7He,YAAc,WAAM,IAUZC,EADIZ,EAAgB,EAAKJ,MAArBI,YAGY,SAAhBA,EAAwBY,EAAW,UACd,OAAhBZ,EAAsBY,EAAW,OACjB,YAAhBZ,IAA2BY,EAAW,MAE/C,EAAKJ,SAAS,CACVR,YAAaY,K,EAGrBC,UAAY,WACR,IAAIC,EAAiB,YAAOC,MAAP,YAAgB,EAAKnB,MAAMC,aAChDS,QAAQC,IAAIO,GACZ,IAAIE,EAASF,EAAkBG,QAAO,SAAAC,GAElC,MAA0B,WAAnBA,EAAQ9B,UAEnBkB,QAAQC,IAAIS,GACZ,EAAKR,SAAS,CAAEV,eAAgBkB,K,EAEpCG,QAAU,SAAAC,GACN,IAAIrB,EAAcqB,EAAMC,OAAOC,MAE3BC,EADiB,YAAOR,MAAP,YAAgB,EAAKnB,MAAMC,aACfoB,QAAO,SAAAC,GAEpC,OADeA,EAAQM,KAAKC,MAAQP,EAAQM,KAAKE,MACjCC,cAAcC,SAAS7B,EAAW4B,kBAEtDrB,QAAQC,IAAIgB,GACZ,EAAKf,SAAS,CAAEV,eAAgByB,EAAUxB,WAAYA,K,uDAEhD,IAAD,OACL,OACI,6BACI,wBAAI8B,QAASC,KAAKnB,aAAlB,8BAGA,2BAAOW,MAAOQ,KAAKlC,MAAMG,WAAYgC,GAAG,OAAOC,KAAK,OAAOC,SAAU,SAACb,GAAD,OAAW,EAAKD,QAAQC,MAC7F,+BACI,+BACI,4BACI,0CACA,yCACA,sCACA,wCACA,qCACA,4CACA,yCAIPU,KAAKlC,MAAME,eAAeoC,KAAI,YAA8D,IAA3DC,EAA0D,EAA1DA,MAAO/C,EAAmD,EAAnDA,OAAQoC,EAA2C,EAA3CA,KAAMnC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAAME,EAAc,EAAdA,QAC1E,OACI,kBAAC,EAAD,CAEIR,IAAKkD,EACL/C,OAAQA,EACRF,UAAWsC,EAAKC,MAChBtC,SAAUqC,EAAKE,KACfrC,SAAUA,EAAS+C,KACnB9C,MAAOA,EACPC,KAAMA,EACNE,QAASA,a,GAvFlB4C,IAAMC,WCTdC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOrD,SAASsD,UAEe,UAA7BD,OAAOrD,SAASsD,UAEhBD,OAAOrD,SAASsD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,a","file":"static/js/main.3ed262cf.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nfunction EmployeeDetails(props) {\r\n    return (\r\n        <tr key={props.key}>\r\n            <td>{props.firstName}</td>\r\n            <td>{props.lastName}</td>\r\n            <td>{props.gender}</td>\r\n            <td>{props.location}</td>\r\n            <td>{props.email}</td>\r\n            <td>{props.cell}</td>\r\n            <td><img src={props.picture.medium} /></td>\r\n        </tr>\r\n\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default EmployeeDetails;","import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport EmployeeDetails from \"./EmployeeDetails\";\r\n\r\nimport \"../App.css\";\r\n\r\nconst sortTypes = {\r\n    up: {\r\n        class: \"sortUp\",\r\n        fn: (a, b) => a.name.localeCompare(b.name)\r\n    },\r\n    down: {\r\n        class: \"sortDown\",\r\n        fn: (a, b) => b.name.localeCompare(a.name)\r\n    },\r\n    default: {\r\n        class: \"sort\",\r\n        fn: (a, b) => a\r\n    }\r\n}\r\nclass Employee extends React.Component {\r\n    state = {\r\n        allRecords: [],\r\n        displayRecords: [],\r\n        searchTerm: \"\",\r\n        currentSort: \"default\"\r\n    }\r\n    componentDidMount = () => {\r\n        axios.get(\"https://randomuser.me/api/?results=200&nat=us\")\r\n            .then(records => {\r\n                console.log(records);\r\n                this.setState({ allRecords: records.data.results, displayRecords: records.data.results }, () => console.log(this.state))\r\n            }\r\n            )\r\n    }\r\n\r\n    alphabetize = () => {\r\n        // let dontMessWithState = new Array(...this.state.allRecords)//deep copy\r\n        // console.log(dontMessWithState)\r\n        // dontMessWithState.sort((firs, seco) => {\r\n        //     console.log(firs.name.first - seco.name.first)\r\n        //     return seco.name.first - firs.name.first\r\n        // })\r\n        // console.log(dontMessWithState)\r\n        // this.setState({ displayRecords: dontMessWithState })\r\n        const { currentSort } = this.state;\r\n        let nextSort;\r\n\r\n        if (currentSort === \"down\") nextSort = \"default\";\r\n        else if (currentSort === \"up\") nextSort = \"down\";\r\n        else if (currentSort === \"default\") nextSort = \"up\";\r\n\r\n        this.setState({\r\n            currentSort: nextSort\r\n        });\r\n    }\r\n    getLadies = () => {\r\n        let dontMessWithState = new Array(...this.state.allRecords)//deep copy\r\n        console.log(dontMessWithState)\r\n        let ladies = dontMessWithState.filter(element => {\r\n\r\n            return element.gender === \"female\"\r\n        })\r\n        console.log(ladies)\r\n        this.setState({ displayRecords: ladies })\r\n    }\r\n    handler = event => {\r\n        let searchTerm = (event.target.value)\r\n        let dontMessWithState = new Array(...this.state.allRecords)//deep copy\r\n        let filtered = dontMessWithState.filter(element => {\r\n            let thisName = element.name.first + element.name.last\r\n            return thisName.toLowerCase().includes(searchTerm.toLowerCase())\r\n        })\r\n        console.log(filtered)\r\n        this.setState({ displayRecords: filtered, searchTerm: searchTerm })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 onClick={this.alphabetize}>\r\n                    Employee Management System\r\n            </h1>\r\n                <input value={this.state.searchTerm} id=\"nick\" type=\"text\" onChange={(event) => this.handler(event)} />\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>First Name</th>\r\n                            <th>Last Name</th>\r\n                            <th>gender</th>\r\n                            <th>location</th>\r\n                            <th>Email</th>\r\n                            <th>Phone Number</th>\r\n                            <th>Picture</th>\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    {this.state.displayRecords.map(({ index, gender, name, location, email, cell, picture }) => {\r\n                        return (\r\n                            <EmployeeDetails\r\n\r\n                                key={index}\r\n                                gender={gender}\r\n                                firstName={name.first}\r\n                                lastName={name.last}\r\n                                location={location.city}\r\n                                email={email}\r\n                                cell={cell}\r\n                                picture={picture}\r\n                            />\r\n                        )\r\n                    })}\r\n                </table>\r\n            </div>)\r\n    }\r\n}\r\n\r\nexport default Employee;\r\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Employees from \"./pages/Employee\"\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Employees />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}